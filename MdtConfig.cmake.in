@PACKAGE_INIT@

if(CMAKE_VERSION VERSION_LESS 3.1.0)
    message(FATAL_ERROR "@MDT_CONFIG_INSTALL_NAMESPACE@ requires at least CMake version 3.1.0")
endif()

if(NOT @MDT_CONFIG_INSTALL_NAMESPACE@_FIND_COMPONENTS)
  set(@MDT_CONFIG_INSTALL_NAMESPACE@_NOT_FOUND_MESSAGE "The @MDT_CONFIG_INSTALL_NAMESPACE@ package requires at least one component")
  set(@MDT_CONFIG_INSTALL_NAMESPACE@_FOUND False)
  return()
endif()


foreach(component ${@MDT_CONFIG_INSTALL_NAMESPACE@_FIND_COMPONENTS})
  # First look into paths relative to this namespace config file
  # This can be useful when all libraries are installed to a common root
  # find_package() looks at given PATHS at last resort,
  # so we have call it first time telling it not to search elsewhere
  find_package(
    @MDT_CONFIG_INSTALL_NAMESPACE@${component}
    ${@MDT_CONFIG_INSTALL_NAMESPACE@_FIND_VERSION}
    QUIET CONFIG
    PATHS "${CMAKE_CURRENT_LIST_DIR}/.." NO_DEFAULT_PATH
  )
  if(NOT @MDT_CONFIG_INSTALL_NAMESPACE@${component}_FOUND)
    # Libraries are installed in various places,
    # let find_package() search in CMAKE_PREFIX_PATH etc...
    find_package(
      @MDT_CONFIG_INSTALL_NAMESPACE@${component}
      ${@MDT_CONFIG_INSTALL_NAMESPACE@_FIND_VERSION}
      QUIET CONFIG
    )
  endif()
  if(NOT @MDT_CONFIG_INSTALL_NAMESPACE@${component}_FOUND AND ${@MDT_CONFIG_INSTALL_NAMESPACE@_FIND_REQUIRED_${component}})
    set(@MDT_CONFIG_INSTALL_NAMESPACE@_NOT_FOUND_MESSAGE "Failed to find @MDT_CONFIG_INSTALL_NAMESPACE@ component ${component} config file (@MDT_CONFIG_INSTALL_NAMESPACE@${component}Config.cmake)")
    set(@MDT_CONFIG_INSTALL_NAMESPACE@_FOUND False)
    break()
  endif()
endforeach()
